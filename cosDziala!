import sys
from PyQt5.QtWidgets import QApplication, QGraphicsView, QGraphicsScene, QGraphicsRectItem
from PyQt5.QtSvg import QGraphicsSvgItem
from PyQt5.QtGui import QBrush, QColor
from PyQt5.QtCore import Qt, QPointF

class ChessBoard(QGraphicsView):
    def __init__(self):
        super(ChessBoard, self).__init__()
        self.scene = QGraphicsScene(self)
        self.setScene(self.scene)
        self.setSceneRect(0, 0, 640, 640)
        self.drawBoard()
        self.addPieces()

    def drawBoard(self):
        light_color = QColor(173, 216, 230)  # Light blue
        dark_color = QColor(0, 0, 139)       # Dark blue
        for i in range(8):
            for j in range(8):
                rect = QGraphicsRectItem(80 * j, 80 * i, 80, 80)
                rect.setBrush(QBrush(light_color if (i + j) % 2 == 0 else dark_color))
                self.scene.addItem(rect)

    def addPieces(self):
        # Add black and white pawns
        for i in range(8):
            pawn_black = QGraphicsSvgItem("bpawn.svg")
            pawn_black.setPos(i * 80, 1 * 80)
            pawn_black.setScale(1.8)  # Adjust scale to fit the board
            self.scene.addItem(pawn_black)

            pawn_white = QGraphicsSvgItem("wpawn.svg")
            pawn_white.setPos(i * 80, 6 * 80)
            pawn_white.setScale(1.8)  # Adjust scale to fit the board
            self.scene.addItem(pawn_white)
        # Similarly, add other pieces...

if __name__ == '__main__':
    app = QApplication(sys.argv)
    board = ChessBoard()
    board.show()
    sys.exit(app.exec_())
